generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  favorites             Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPayment {
  Date___time        DateTime? @map("Date & time") @db.Timestamptz(6)
  Order_ID           BigInt    @id @map("Order ID")
  Channel            String?
  Transaction_type   String?   @map("Transaction type")
  Amount             BigInt?
  Transaction_status String?   @map("Transaction status")
  Transaction_ID     String?   @map("Transaction ID")
  Transaction_time   DateTime? @map("Transaction time") @db.Timestamptz(6)
  Customer_e_mail    String?   @map("Customer e-mail")
  Note               String?
}

enum UserRole {
  ADMIN
  USER
}

model Favorite {
  id            String      @id @default(cuid())
  title         String
  originalTitle String
  cover         String
  url           String
  createdAt     DateTime    @default(now())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parodies      Parody[]
  characters    Character[]
  tags          Tag[]
  artists       Artist[]
  groups        Group[]
  languages     Language[]
  categories    Category[]
  images        Image[]
}

model Parody {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Character {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Artist {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Group {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Language {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  favorites Favorite[]
}

model Image {
  id         String   @id @default(cuid())
  url        String
  favoriteId String
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
}
